


(*
    Nome: Joana Maia Teixeira Alves
    Número: PG50457

    NOTA: Todas as condições foram testadas a 20000 steps
*)


module Email

  use int.Int

  type user 
  type content
  type message = { from : user;
       	       	   tto : user; 
                   content : content }

  clone set.SetApp with type elt = message

  clone fmap.MapApp with type key = user 


  type statetype = { mutable sent : set ; mutable inbox : t set }
    invariant { 
        (* Para todos os users, as mensagens que estiverem na sua inbox têm este como destinatário *)
        (forall u :user, m :message. mem u inbox /\ SetApp.mem m (inbox u) -> m.tto = u) 
    }
    by { sent = empty() ; inbox = create() }


  val state : statetype





  let send (f t :user) (c :content) : () 
    (* Os utilizadores têm de possuir inbox*)
    requires { mem t state.inbox }
    requires { mem f state.inbox }
    (* A mensagem não pode estar no conjunto sent *)
    requires { let m = { from=f ; tto=t ; content=c } in not SetApp.mem m state.sent } 
    
    (* A mensagem tem de estar no conjunto sent *)
    ensures  { let m = { from=f ; tto=t ; content=c } in SetApp.mem m state.sent }
    (* O conjunto sent aumenta o seu tamanho por 1 *)
    ensures  { cardinal (state.sent) = cardinal (old state.sent) + 1 }
    (* As mensagens presentes no conjunto sent têm de ser as que já lá estavam mais a mensagem enviada *)
    ensures  { let m = { from=f ; tto=t ; content=c } in forall m' :message. SetApp.mem m' state.sent -> SetApp.mem m' (old state.sent) \/ m' = m }
    (* As inbox de todos os utilizadores mantém-se *)
    ensures  { state.inbox = (old state.inbox) }
    (* As mensagens que já se encontravam no conjunto sent permancem lá *)
    ensures { forall m : message . SetApp.mem m (old state.sent) -> SetApp.mem m (state.sent)}
   
    writes   { state.sent }
    
  = let m = { from=f ; tto=t ; content=c } in 
    state.sent <- SetApp.add m state.sent




  let receive (t :user) (m :message) : ()
    (* O utilizador tem de ser o destinatário da mensagem *)
    requires { m.tto = t }
    (* O utilizador tem de possuir inbox *)
    requires { mem t state.inbox }
    (* A mensagem tem de estar no conjunto sent *)
    requires { SetApp.mem m state.sent }
    
    (* A mensagem vai sair do conjunto sent e ficar na inbox do destinatário*)
    ensures  {(not SetApp.mem m state.sent) /\ (SetApp.mem m (state.inbox t)) }
    (* Todas as mensagens que estavam no conjunto sent, à exceção da recebida, permancecem no conjunto sent*)
    ensures { forall m' : message . SetApp.mem m' (old state.sent) -> SetApp.mem m' (state.sent) \/ m = m'}
    (* O conjunto sent perde um elemento *)
    ensures  { cardinal (state.sent) = cardinal (old state.sent) - 1 }
    (* A inbox fica igual depois da operação *)
    ensures { forall u :user. mem u state.inbox = mem u (old state.inbox) } 
    
    writes   { state.sent, state.inbox }
    
  = let umsgs = SetApp.add m (find t state.inbox) in
    state.inbox <- add t umsgs state.inbox;
    state.sent <- SetApp.remove m state.sent




  val u :user
  val f :user
  val t :user
  val c :content


  let scenario1 ()
    requires { let m = { from=u ; tto=u ; content=c } in not SetApp.mem m state.sent }
    requires { mem u state.inbox }
    ensures  { cardinal (state.sent) = cardinal (old state.sent) }
  = send u u c ; receive u { from=u ; tto=u ; content=c } 


  let scenario2 ()
    requires { SetApp.is_empty(state.sent) }
    requires { mem u state.inbox }
    requires { mem t state.inbox }
    requires { mem f state.inbox }
    requires { u <> t /\ f <> t /\ f <> u }        
    ensures  { SetApp.is_empty(state.sent) }
  = send f u c ; send f t c ; receive u { from=f ; tto=u ; content=c } ; receive t { from=f ; tto=t ; content=c } 


  (* FAIL - checks inconsistencies *)
  let scenario3 ()  
    requires { let m = { from=u ; tto=u ; content=c } in not SetApp.mem m state.sent }
    requires { mem u state.inbox }
    ensures  { cardinal (state.sent) = cardinal (old state.sent) }
  = send u u c ; receive u { from=f ; tto=u ; content=c } 



end